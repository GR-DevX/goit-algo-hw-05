def binary_search_with_upper_bound(arr, target):
    low = 0
    high = len(arr) - 1
    iterations = 0
    upper_bound_candidate = None

    if not arr:
        return (iterations, None)

    # Спочатку знайдемо елемент або визначимо місце для "верхньої межі"
    # Цей цикл шукає перше значення, що >= target
    search_low = 0
    search_high = len(arr) -1
    
    temp_iterations_for_bound = 0
    # Цикл для знаходження "верхньої межі"
    # Ідея полягає в тому, щоб знайти найлівіший елемент, який >= target
    res_idx = -1
    
    current_low, current_high = 0, len(arr) - 1
    while current_low <= current_high:
        temp_iterations_for_bound +=1
        mid = (current_low + current_high) // 2
        if arr[mid] >= target:
            res_idx = mid
            current_high = mid - 1 # Шукаємо лівіше, чи є ще кращий кандидат
        else:
            current_low = mid + 1
            
    if res_idx != -1:
        upper_bound_candidate = arr[res_idx]
    else: # Всі елементи менші за target
        upper_bound_candidate = None

    # Тепер окремо підрахуємо ітерації для знаходження самого елемента (якщо він є)
    # відповідно до умови "кількість ітерацій, потрібних для знаходження елемента"
    # Якщо елемент не знайдено, кількість ітерацій буде відповідати пошуку до кінця.
    
    # Цей цикл для підрахунку ітерацій до знаходження елемента
    iterations_for_find = 0
    low_find, high_find = 0, len(arr) - 1
    found_at_iteration = -1

    while low_find <= high_find:
        iterations_for_find += 1
        mid_find = (low_find + high_find) // 2
        if arr[mid_find] == target:
            # Елемент знайдено, це і є кількість ітерацій для знаходження
            found_at_iteration = iterations_for_find
            break 
        elif arr[mid_find] < target:
            low_find = mid_find + 1
        else:
            high_find = mid_find - 1
    
    # Якщо елемент був знайдений, використовуємо ці ітерації.
    # Якщо ні, то iterations_for_find показує кількість ітерацій, витрачених на пошук.
    # Завдання просить "кількість ітерацій, потрібних для знаходження елемента".
    # Якщо елемент не знайдено, то "потрібних для знаходження" може інтерпретуватися як
    # кількість ітерацій до моменту, коли стало ясно, що його немає.
    # Тому `iterations_for_find` є коректним.

    return (iterations_for_find, upper_bound_candidate)

# Тестування двійкового пошуку
sorted_floats = [1.0, 2.5, 3.0, 4.5, 5.0, 6.5, 7.0, 8.5]
print(f"Масив: {sorted_floats}")

# Елемент існує
target1 = 4.5
iters1, ub1 = binary_search_with_upper_bound(sorted_floats, target1)
print(f"Пошук {target1}: Ітерацій = {iters1}, Верхня межа = {ub1}") # Очікуємо: Ітерацій = 1-3 (залежно від реалізації), Верхня межа = 4.5

# Елемент не існує, але є верхня межа
target2 = 4.0
iters2, ub2 = binary_search_with_upper_bound(sorted_floats, target2)
print(f"Пошук {target2}: Ітерацій = {iters2}, Верхня межа = {ub2}") # Очікуємо: Ітерацій = 3-4, Верхня межа = 4.5

# Елемент не існує, знаходиться між елементами
target3 = 6.0
iters3, ub3 = binary_search_with_upper_bound(sorted_floats, target3)
print(f"Пошук {target3}: Ітерацій = {iters3}, Верхня межа = {ub3}") # Очікуємо: Ітерацій = 2-4, Верхня межа = 6.5

# Елемент менший за всі
target4 = 0.5
iters4, ub4 = binary_search_with_upper_bound(sorted_floats, target4)
print(f"Пошук {target4}: Ітерацій = {iters4}, Верхня межа = {ub4}") # Очікуємо: Ітерацій = 3-4, Верхня межа = 1.0

# Елемент більший за всі
target5 = 9.0
iters5, ub5 = binary_search_with_upper_bound(sorted_floats, target5)
print(f"Пошук {target5}: Ітерацій = {iters5}, Верхня межа = {ub5}") # Очікуємо: Ітерацій = 3-4, Верхня межа = None

# Порожній масив
empty_arr = []
iters_empty, ub_empty = binary_search_with_upper_bound(empty_arr, 5.0)
print(f"Пошук в порожньому масиві: Ітерацій = {iters_empty}, Верхня межа = {ub_empty}") # Очікуємо: Ітерацій = 0, Верхня межа = None

# Масив з одним елементом
single_arr = [10.0]
iters_s1, ub_s1 = binary_search_with_upper_bound(single_arr, 10.0)
print(f"Пошук 10.0 в {single_arr}: Ітерацій = {iters_s1}, Верхня межа = {ub_s1}") # Очікуємо: Ітерацій = 1, Верхня межа = 10.0
iters_s2, ub_s2 = binary_search_with_upper_bound(single_arr, 5.0)
print(f"Пошук 5.0 в {single_arr}: Ітерацій = {iters_s2}, Верхня межа = {ub_s2}") # Очікуємо: Ітерацій = 1, Верхня межа = 10.0
iters_s3, ub_s3 = binary_search_with_upper_bound(single_arr, 15.0)
print(f"Пошук 15.0 в {single_arr}: Ітерацій = {iters_s3}, Верхня межа = {ub_s3}")# Очікуємо: Ітерацій = 1, Верхня межа = None